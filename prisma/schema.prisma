generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  kindeId   String    @unique
  email     String    @unique
  name      String?
  createdAt DateTime  @default(now())
  chatbots  Chatbot[]

  ApiKey ApiKey[]
}

model Chatbot {
  id              String        @id @default(auto()) @map("_id") @db.ObjectId
  name            String
  connectionString String       @unique
  userId          String
  user            User          @relation(fields: [userId], references: [kindeId])
  settings        ChatSettings?
  conversations   Conversation[]
  createdAt       DateTime      @default(now())

  Prompt Prompt[]

  Intent Intent[]
}
model Prompt {
  id         String   @id @default(uuid()) @map("_id")
  chatbotId  String @db.ObjectId
  chatbot    Chatbot  @relation(fields: [chatbotId], references: [id])
  trigger    String
  response   String
  createdAt  DateTime @default(now())
}
model ChatSettings {
  id               String   @id @default(auto()) @map("_id") @db.ObjectId
  chatbotId        String   @unique @db.ObjectId
  chatbot          Chatbot  @relation(fields: [chatbotId], references: [id])
  brandColor       String
  chatBackground   String
  chatOpacity      Float
  chatBorderRadius Int
  customLogo       String?
  chatWidth        Int      @default(300)
  chatHeight       Int      @default(400)
  chatOffsetX      Int       @default(20)  
  chatOffsetY      Int       @default(20)  
  showEmailCapture Boolean  @default(false)
  emailPlaceholder String   @default("Enter your email")
  quickReplies     Json
  userBubbleColor String @default("#e0e0e0")
  aiBubbleColor   String @default("#2563eb")
  headingColor    String @default("#000000")
}

model Conversation {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  chatbotId String    @db.ObjectId
  createdAt  DateTime @default(now())
  chatbot   Chatbot   @relation(fields: [chatbotId], references: [id])
  messages  Message[]
}

model Message {
  id            String      @id @default(auto()) @map("_id") @db.ObjectId
  conversationId String     @db.ObjectId
  conversation  Conversation @relation(fields: [conversationId], references: [id])
  content       String
  role          String
  createdAt     DateTime    @default(now())
}
model Intent {
  id        String   @id @default(uuid()) @map("_id")
  name      String
  responses String[] // Array of response strings
  chatbotId String @db.ObjectId
  chatbot   Chatbot  @relation(fields: [chatbotId], references: [id])
}
model ApiKey {
  id     String @id @default(uuid()) @map("_id")
  key    String @unique
  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id])
}